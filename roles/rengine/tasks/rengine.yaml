---
# code: language=ansible

- name: Populate service facts
  ansible.builtin.service_facts:

# - name: Print service facts
#   ansible.builtin.debug:
#     var: ansible_facts.services

- name: install dependencies
  apt:
    name:
      - ca-certificates
      - curl
      - gnupg
    state: latest
    update_cache: yes
  become: yes
  when: "'docker' not in services"

- name: GPG key
  apt_key:
    url: "https://download.docker.com/linux/debian/gpg"
    state: present
  become: yes
  when: "'docker' not in services"

- name: repository docker
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/debian bullseye stable"
    state: present
    filename: docker
  become: yes
  when: "'docker' not in services"

- name: install docker
  apt:
    name:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io 
      - docker-buildx-plugin 
      - docker-compose-plugin
    state: latest
    update_cache: yes
  become: yes
  when: "'docker' not in services"

- name: Install Docker Python SDK
  pip:
    name: docker
    state: present
  when: "'docker' not in services"

- name: anisble pip install docker-compose
  ansible.builtin.pip:
    name: PyYAML==5.3.1
  become: yes
  when: "'docker' not in services"

- name: anisble pip install docker-compose
  ansible.builtin.pip:
    name: docker-compose
  become: yes
  when: "'docker' not in services"

- name: Check Docker service status
  ansible.builtin.service:
    name: docker
    state: started
  register: docker_service_status

- name: Enable Docker service at boot
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes
  become: yes
  when: docker_service_status.status != 'running'

- name: install make
  package:
    name: make
    state: present
  when: "'make' not in services"

- name: find env file
  ansible.builtin.find:
    paths: /home/kali/rengine/
    recurse: yes
    patterns: ".env"
    hidden: true
  register: env

- name: update domain name in env file
  ansible.builtin.lineinfile:
    path: "{{ item.path }}"
    state: present 
    regexp: '^DOMAIN_NAME='
    line: 'DOMAIN_NAME=rengine.{{ root_domain }}'
  loop: "{{ env.files }}"
  when: env is defined

- name: update authority password in env file
  ansible.builtin.lineinfile:
    path: "{{ item.path }}"
    state: present
    regexp: '^AUTHORITY_PASSWORD='
    line: "AUTHORITY_PASSWORD={{ lookup('ansible.builtin.password', '/tmp/passwordfile', chars=['ascii_letters', 'digits', 'punctuation']) }}"
  loop: "{{ env.files }}"
  when: env is defined

- name: update postgres password in env file
  ansible.builtin.lineinfile:
    path: "{{ item.path }}"
    state: present 
    regexp: '^POSTGRES_PASSWORD='
    line: "POSTGRES_PASSWORD={{  lookup('ansible.builtin.password', '/tmp/passwordfile1', chars=['ascii_letters', 'digits', 'punctuation']) }}"
  loop: "{{ env.files }}"
  when: env is defined

- name: Docker-Compose Certs for Rengine
  community.docker.docker_compose:
    project_src: "{{ item.path | dirname }}"
    files: docker-compose.setup.yml
    state: present
  become: yes
  loop: "{{ env.files }}"
  when: env is defined

- name: Docker-Compose Up for Rengine
  community.docker.docker_compose:
    project_src: "{{ item.path | dirname }}"
    state: present
  become: yes
  loop: "{{ env.files }}"
  when: env is defined

- name: Install Ansible pexpect
  pip:
    name: pexpect
  become: yes

- name: Create Rengine User
  ansible.builtin.expect:
    command: docker exec -it rengine_web_1 python3 manage.py createsuperuser
    responses:
      "Username": "{{ rengine_username }}"
      "Email address:": "\n"
      "Password:": "{{ rengine_password }}"
      "Password ": "{{ rengine_password }}"
  become: yes
  register: result
  when: env is defined

- debug: 
    msg: "{{ result }}"

